mymin <- tmp[feat44!=0, min(feat44)]
mydiff <- mymean-mymin
mydiff
str(mydiff)
str(mymean)
attriutes(mymean, 'mean')
attributes(mymean, 'mean')
attr(mymean, 'mean')
attr(mymean)
attributes(mymean)$mean
attributes(mymean)
attributes(mymean)['mean']
attributes(mymean)$names
str(mymean)
mymean$mean
mymean['mean']
mydiff <- mymean['mean']-mymin
mydiff
mydiff <- abs(mymean['mean']-mymin)
myn <- sum(tmp$feat44==0)
mymean <- mean(test)['mean']
mydiff <- abs(mymean-mymin)
myn <- sum(tmp$feat44==0)
myimp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn)
myimp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T)
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T)
myimp <- mymean-mysamp
tmp[feat44==0, feat44:=myimp]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()
head(mysamp)
summary(mysamp)
mymean+mydiff
summary(myimp)
myimp <- rep(mymean, length(mysamp))-mysamp
summary(myimp)
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[feat44==0, feat44:=myimp] # replace 0's with sampled values
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()
summary(myimp)
myimp <- abs(mymean-mysamp) # flip sample values over the mean
summary(myimp)
summary(mysamp)
mymean
mymin
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- abs(mymean-mysamp) # flip sample values over the mean
tmp[feat44==0, feat44:=myimp] # replace 0's with sampled values
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()
summary(myimp)
summary(mysamp)
2.879-mymean
mymean-2.879
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[feat44==0, feat44:=myimp] # replace 0's with sampled values
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[feat44==0, feat44:=myimp] # replace 0's with sampled values
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()
geom_vline(xintercept=mymin)
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)+
geom_vline(mymean-mydiff)
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)+
geom_vline(xintercept=mymean-mydiff)
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)+
geom_vline(xintercept=mymean)
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()
predict(test)
summary(test)
?mode
?survfit
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)+
geom_vline(xintercept=mymean)
tmp[, sum(feat44==0)/length(feat44)]
mean(test)
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)+
geom_vline(xintercept=0.702161794)
log(0)
tmp[, feat44log:=0]
tmp[feat44!=0, feat44log:=log(feat44)]
ggplot(tmp, aes(x=feat44log, fill=target))+
geom_bar()
test <- cenfit(obs=tmp[,feat44log], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
mymin <- tmp[feat44!=0, min(feat44log)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
diff(3, 2)
diff(c(3), c(2))
diff(c(3,2))
mydiff
mydiff <- abs(diff(mymean, mymin)) # mean - min
mymean
mymin
mydiff <- abs(diff(mymean, mymin)) # mean - min
mydiff <- abs(diff(c(mymean, mymin))) # mean - min
mydiff
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44log>=(mymean+mydiff), feat44log], myn, replace=T) # sample the right side of my distribution
names(tmp)
mymean+mydiff
mymean
mydiff
tmp[feat44log>=(mymean+mydiff), feat44log]
summary(tmp$feat44log)
mymean
test <- cenfit(obs=tmp[,feat44log], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymean
test <- cenfit(obs=tmp[,feat44log], censored=tmp[,feat44log==0])
mymean <- mean(test)['mean'] # estimated mean
mean(test)
median(test)
mymed <- median(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44log)] # min with 0's removed
mydiff <- abs(diff(c(mymed, mymin))) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44log>=(mymed+mydiff), feat44log], myn, replace=T) # sample the right side of my distribution
tmp[feat44log>=(mymed+mydiff), feat44log]
mymed+mydiff
mymed
mymed <- median(test)['median'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44log)] # min with 0's removed
mydiff <- abs(diff(c(mymed, mymin))) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44log>=(mymed+mydiff), feat44log], myn, replace=T) # sample the right side of my distribution
tmp[feat44log>=(mymed+mydiff), feat44log]
mymed+mydiff
mymed
median(test)[
median(test)
mymed <- median(test) # estimated median
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
tmp[, feat44log:=0]
tmp[feat44!=0, feat44log:=log(feat44)]
test <- cenfit(obs=tmp[,feat44log], censored=tmp[,feat44log==0])
mymed <- median(test) # estimated median
mymed
tmp[, sum(feat44log==0)/length(feat44log)]
mymin <- tmp[feat44log!=0, min(feat44log)] # min with 0's removed
mydiff <- abs(diff(c(mymed, mymin))) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44log>=(mymed+mydiff), feat44log], myn, replace=T) # sample the right side of my distribution
myimp <- mymed-abs(mymed-mysamp) # flip sample values over the mean
tmp[feat44log==0, feat44log:=myimp] # replace 0's with sampled values
ggplot(tmp, aes(x=feat44log, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)+
geom_vline(xintercept=0.702161794)
ggplot(tmp, aes(x=feat44log, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)
ggplot(tmp, aes(x=feat44log, fill=target))+
geom_bar()+
geom_vline(xintercept=mymed)
ggplot(tmp, aes(x=exp(feat44log), fill=target))+
geom_bar()+
geom_vline(xintercept=mymed)
ggplot(tmp, aes(x=exp(feat44log), fill=target))+
geom_bar()+
geom_vline(xintercept=exp(mymed))
ggplot(tmp, aes(x=feat44log, fill=target))+
geom_bar()+
geom_vline(xintercept=exp(mymed))
# take only those where target=1
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()
library(NADA)
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[feat44==0, feat44:=myimp] # replace 0's with sampled values
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
geom_vline(xintercept=mymin)
ggplot(tmp, aes(x=feat44, fill=Ifeat44))+
# take only those where target=1
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
ggtitle('Before Imputation')
library(NADA)
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[feat44==0, Ifeat44:=T] # mark those I am about to replace with imputed values
tmp[feat44==0, feat44:=myimp] # replace 0's with values
ggplot(tmp, aes(x=feat44, fill=Ifeat44))+
geom_bar()+
geom_vline(xintercept=mymin)+
ggtatile('After Imputation')
ggplot(tmp, aes(x=feat44, fill=Ifeat44))+
geom_bar()+
geom_vline(xintercept=mymin)+
ggtitle('After Imputation')
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
ggtitle('Before Imputation')
library(NADA)
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[feat44==0, Ifeat44:=T] # mark those I am about to replace with imputed values
tmp[feat44==0, feat44:=myimp] # replace 0's with values
ggplot(tmp, aes(x=feat44, fill=Ifeat44))+
geom_bar()+
geom_vline(xintercept=mymin)+
ggtitle('After Imputation')
# take only those where target=1
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
ggtitle('Before Imputation')
library(NADA)
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[Ifeat44:=F]
tmp[feat44==0, Ifeat44:=T] # mark those I am about to replace with imputed values
tmp[feat44==0, feat44:=myimp] # replace 0's with values
ggplot(tmp, aes(x=feat44, fill=Ifeat44))+
geom_bar()+
geom_vline(xintercept=mymin)+
ggtitle('After Imputation')
# take only those where target=1
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
ggtitle('Before Imputation')
library(NADA)
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[, Ifeat44:=F]
tmp[feat44==0, Ifeat44:=T] # mark those I am about to replace with imputed values
tmp[feat44==0, feat44:=myimp] # replace 0's with values
ggplot(tmp, aes(x=feat44, fill=Ifeat44))+
geom_bar()+
geom_vline(xintercept=mymin)+
ggtitle('After Imputation')
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
ggtitle('Before Imputation')+
guides(fill=F)
# take only those where target=1
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=target))+
geom_bar()+
ggtitle('Before Imputation')+
guides(fill=F)
library(NADA)
test <- cenfit(obs=tmp[,feat44], censored=tmp[,feat44==0])
mymean <- mean(test)['mean'] # estimated mean
mymin <- tmp[feat44!=0, min(feat44)] # min with 0's removed
mydiff <- abs(mymean-mymin) # mean - min
myn <- sum(tmp$feat44==0) # how many values to bootstrap
mysamp <- sample(tmp[feat44>=(mymean+mydiff), feat44], myn, replace=T) # sample the right side of my distribution
myimp <- mymean-abs(mymean-mysamp) # flip sample values over the mean
tmp[, Ifeat44:=F]
tmp[feat44==0, Ifeat44:=T] # mark those I am about to replace with imputed values
tmp[feat44==0, feat44:=myimp] # replace 0's with values
ggplot(tmp, aes(x=feat44, fill=Ifeat44))+
geom_bar()+
geom_vline(xintercept=mymin)+
ggtitle('After Imputation')+
guides(fill=F)
myzeros <- round(sapply(train, function(x) 100*sum(x==0)/length(x)), 1)
myzeros
write.csv(myzeros, file='C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Percent Zeros.csv')
write.csv(myzeros, file='C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Percent Zeros.csv')
zerotable <- fread('C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Percent Zeros.csv')
names(zerotable)
zerotable <- zerotable[, x:=paste0(x, '%']
zerotable <- zerotable[, x:=paste0(x, '%')]
class(zerotable$x)
zerotable <- fread('C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Percent Zeros.csv')
zerotable <- zerotable[, x:=paste0(x, '%')]
zerotable <- zerotable[x=='NA%', x:='N/A']
setnames(zerotable, c('Variable', "% 0's"))
pander(zerotable)
pander(zerotable[-1:2, ])
sapply(train, function(x) sum(is.na(x)))
mymissing <- sapply(train, function(x) sum(is.na(x))) # only 8 variables with missing
pander(mymissing[mymissing>0])
pander(data.frame(mymissing[mymissing>0]))
misstable <- data.table(mymissing[mymissing>0])
setnames(misstable, c('Variable', '# Missing'))
mymissing <- mymissing[mymissing>0]
misstable <- data.table(Variable=names(mymissing) nMiss=mymissing)
misstable <- data.table(Variable=names(mymissing), nMiss=mymissing)
setnames(misstable, c('Variable', '# Missing'))
pander(misstable)
mymissing <- sapply(train, function(x) sum(is.na(x))) # only 8 variables with missing
mymissing <- mymissing[mymissing>0]
write.csv(mymissing, file='C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Number Missing.csv')
misstable <- fread('C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Number Missing.csv')
misstable
setnames(misstable, c('Variable', '# Missing'))
pander(misstable)
sapply(names(train), function(x){
dat <- with(train, get(x))
if(sum(is.na(dat))>0){
newname <- paste0('I', x)
train[, as.character(newname):=as.numeric(is.na(dat))]
}
})
mymissing
train[, Mfeat20:=is.na(feat20)]
train[, Mfeat21:=is.na(feat21)]
train[, Mfeat22:=is.na(feat22)]
train[, Mfeat29:=is.na(feat29)]
train[, Mfeat44:=is.na(feat44)]
train[, Mfeat45:=is.na(feat45)]
train[, Mfeat46:=is.na(feat46)]
train[, Mfeat55:=is.na(feat55)]
train$MVP <- factor(with(train, paste0(Mfeat20, Mfeat21, Mfeat22, Mfeat29, Mfeat44, Mfeat45, Mfeat46, Mfeat55)))
m.table <- with(train, table(MVP, target)) # none of these look informative
m.table
train[, Mfeat20:=as.numeric(is.na(feat20))]
train[, Mfeat21:=as.numeric(is.na(feat21))]
train[, Mfeat22:=as.numeric(is.na(feat22))]
train[, Mfeat29:=as.numeric(is.na(feat29))]
train[, Mfeat44:=as.numeric(is.na(feat44))]
train[, Mfeat45:=as.numeric(is.na(feat45))]
train[, Mfeat46:=as.numeric(is.na(feat46))]
train[, Mfeat55:=as.numeric(is.na(feat55))]
train$MVP <- factor(with(train, paste0(Mfeat20, Mfeat21, Mfeat22, Mfeat29, Mfeat44, Mfeat45, Mfeat46, Mfeat55)))
m.table <- with(train, table(MVP, target)) # none of these look informative
chisq.test(m.table) # confirmed
m.table
test <- data.frame(a=c(1, 2, 3), b=c(2, 4, 6), c=c(1, 2, 3))
any.duplicated(test)
anyDuplicated(test)
anyDuplicated(test, MARGIN=2)
test
test$a==test$c
duplicated(iris3, MARGIN = c(1, 3))
any(train$Mfeat20!=train$Mfeat21)
sum(train$Mfeat20-train$Mfeat21)
sum(train$Mfeat20-train$Mfeat22)
any(train$Mfeat44!=train$Mfeat45)
sum(train$Mfeat44-train$Mfeat45)
sum(train$Mfeat44!=train$Mfeat45)
sum(train$Mfeat44!=train$Mfeat46)
train[is.na(feat46), sum(is.na(feat55))]
train[is.na(feat20), sum(is.na(feat55))]
m.table
factorial(4)
comb(1:4)
combinations(1:4)
combn(1:4)
?combn
combn(1:4, 4)
train$MVP <- factor(with(train, paste0(Mfeat20, Mfeat29, Mfeat44, Mfeat55)))
m.table <- with(train, table(MVP, target)) # none of these look informative
m.table
2^4
chisq.test(m.table)
mymissing <- sapply(train, function(x) 100*sum(is.na(x))/length(x)) # only 8 variables with missing
mymissing <- mymissing[mymissing>0]
mymissing
write.csv(mymissing, file='C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Number Missing.csv')
write.csv(mymissing, file='C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Percent Missing.csv')
ggmissing(train[, list(target, feat20, feat21, feat22m feat29, feat44, feat45, feat46, feat55)])
ggmissing(data=train[, list(target, feat20, feat21, feat22, feat29, feat44, feat45, feat46, feat55)])
ggmissing(data=train[, list(target, feat20, feat21, feat22, feat29, feat44, feat45, feat46, feat55)])+
facet_wrap(~MVP)
ggmissing(data=train[, list(target, feat20, feat21, feat22, feat29, feat44, feat45, feat46, feat55, MVP)])+
facet_wrap(~MVP)
names(train)
ggmissing(data=train[, list(target, feat20, feat21, feat22, feat29, feat44, feat45, feat46, feat55, MVP)])
getwd()
setwd('cloud/Classes/Data Prep/Final Project')
tmp <- train[target==0 & !is.na(feat44), list(exampleid, target, feat44)]
ggplot(tmp, aes(x=feat44, fill=(feat44==0)))+
geom_bar()+
ggtitle('Before Imputation')+
guides(fill=F)
allLibs <- .packages()
allLibs
read.bib("Appendix.bib")
library(knitcitations)
read.bib("Appendix.bib")
?write.bib
library(rpart)
data=train
variable=train$feat20
?formula
formula(feat20~.)
form=feat20~.
form
?tree
mytree <- rpart(form, data)
mytree
plotcp(mytree)
names(train)
rm(list=ls())
# Clear working environment
rm(list=ls())
# Options for document compilation
opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, comment=NA, fig.height=3, fig.width=4, fig.cap='', results='hide')
# Set table options for neat tables
library(pander)
panderOptions('table.split.table', 120)
panderOptions('table.split.cells', 30)
panderOptions('table.style', 'rmarkdown')
# Globally set plot parameters
library(ggplot2)
theme_set(theme_bw(base_size=18))
theme_update(panel.grid.major=element_line(colour="#CCCCCC", size=0.3), panel.grid.minor=element_line(colour="grey96", size=0.7))
library(data.table)
train <- fread('C:/Users/Robert/cloud/Classes/Data Prep/Final Project/Data/WANGphy_train.csv')
train[, feat47:=NULL]
train[, feat48:=NULL]
train[, feat49:=NULL]
train[, feat50:=NULL]
train[, feat51:=NULL]
tmp <- melt(train[!is.na(feat22), ], id.vars=c('exampleid', 'feat22'))
library(reshape2)
tmp <- melt(train[!is.na(feat22), ], id.vars=c('exampleid', 'feat22'))
library(ggplot2)
theme_set(theme_bw(base_size=18))
theme_update(panel.grid.major=element_line(colour="#CCCCCC", size=0.3),
panel.grid.minor=element_line(colour="grey96", size=0.7))
mynames <- grep('feat', names(train), value=T)
mynames
path <- file.path(getwd(), 'Figures', 'temp')
setwd(path)
setwd(path)
sapply(mynames, function(x){
p <- ggplot(tmp, aes_string(x=x, y='feat22'))+
geom_point()
ggsave(p, file=paste0(x, '.png'))
})
})
head(tmp)
tmp <- train[!is.na(feat22), ]
sapply(mynames, function(x){
p <- ggplot(tmp, aes_string(x=x, y='feat22'))+
geom_point()
ggsave(p, file=paste0(x, '.png'))
})
sapply(mynames, function(x){
p <- ggplot(tmp, aes_string(x=x, y='feat22'))+
geom_point()+
geom_smooth()
ggsave(p, file=paste0(x, '.png'))
})
